#!/bin/sh
set -o nounset                              # Treat unset variables as an error
set -e                                      # Exit when there is an error

# ---------------------------- HELP MESSAGE ----------------------------

HELP="Usage: ${0##*/}: [-dgh] [-l music_library] [-p playlist]\n
where
    -d              debug mode
    -p playlist     just play the list without search
    -l music_lib    directory where to search music files
    -g              gui mode
    -h              show this help

Press <TAB>/<SHIFT><TAB> to make multi-selection and <Enter> to play.

When "-p playlist" is given, the utility just play the list.

NOTE: .fdignore file in Music folder is used to exclude directories and
files during \`fd\` search.
"
# ---------------------- CONSTANTS AND VARIABLES -----------------------

COLOR_FG_RED="\\e[31m"
COLOR_FG_GREEN="\\e[32m"
COLOR_FG_YELLOW="\\e[33m"
COLOR_FG_BLUE="\\e[34m"
COLOR_FG_MAGENTA="\\e[35m"
COLOR_FG_CYAN="\\e[36m"
ES_BOLD="\\e[1m"
ES_BLINK="\\e[5m"
ES_END="\\e[m"
# \e[nA: move the cursor up to the nth line
# \e[nF: move the cursor to the begining of the previous nth line
# \e[nK: erase in line, n=0 or missing: clear from the cursor to
#        the end of the line; n=1, from the cursor to the begining
#        of the line; 2: the entire line
CURSOR_UP_ERASE_LINE="\\e[2A\\e[2K"

# user `fd` rather than `find` as `fzf` search command for two reasons:
# 1. `fd` respects `.fdignore` file, which can easily exlude files/folders.
# 2. `fd` can easily specify file extensions of music files to focus on.
# BTW, to review all file types (by extension) in a directory:
# fd -t file | awk -F "/" '{n=split($NF, a, "."); print a[n]}' | sort | uniq
export FZF_DEFAULT_COMMAND="fd -t file -e wav -e ape -e flac -e m4a -e mp3 \
-e ogg"

debug=0
music_lib="${HOME}/Music"
pl=${music_lib}/pl.m3u
# -vo null: no album art
# -novideo: only audio info
# -msglevel all=-1:statusline=5: compolete silence except for timestamp
# -playlist <file>: play a list
player="mplayer"
opts="-vo null -novideo -msglevel all=-1:statusline=5 -loop 0"
gui=F
title_max_len=45
just_play_list=false

# -------------------- OPTIONS & ARGUMENTS PARSERS ---------------------

while getopts :l:p:dgh name
do
    case $name in
        d)
            debug=1
            ;;
        l)
            music_lib="$OPTARG"
            ;;
        p)
            pl="$OPTARG"
            just_play_list=true
            ;;
        g)
            gui=T
            player=mpv
            ;;
        h)
            printf "$HELP"
            exit 0
            ;;
        :)
            printf "Missing argument for option [%s].\n" "$OPTARG"
            printf "$HELP"
            exit 2
            ;;
        ?)
            printf "Unknown option [%s].\n" "$OPTARG"
            printf "$HELP"
            exit 1
            ;;
    esac
done

# ----------------------------  FUNCTIONS   ----------------------------

play() # $1: playlist file
{
    q=$(cat "$1")
    msg="\nCommand Keys: Next(<Enter>), Pause/Play(<Space>), Quit(q)\n\n"
    msg+="$COLOR_FG_RED$ES_BOLD"
    msg+="Play queue(repeat):$ES_END\n"
    IFS=$'\n'
    for song in $q;
    do
        title="${song##*/}"
        #if the song name is too long, cut to
        if [ ${#title} -gt $title_max_len ]; then
            title="$(echo $title | cut -c -$title_max_len) ..."
        fi
        msg+="$COLOR_FG_GREEN$ES_BOLD$title$ES_END\n"
    done
    printf "$msg"
    # the below empty line is intended to feed `mplayer`, for it will
    # swallow the previous line of the time stamp status line on the
    # screen after user's interactive control input like 'p' for PAUSE.
    printf "\n"
    sh -c "$player $opts -playlist $1"
}

# ---------------------------- MAIN PROGRAM ----------------------------

if $just_play_list; then
    play "$pl"
    exit 0
fi

[ $debug -eq 1 ] && printf "PID=$$\n"
cd "$music_lib"

if [ ! -p ./pipe ]; then
    mkfifo pipe
fi

# Press CTRL-Q to quit `fzf-player`
# Use mplayer's interactive control during it's playing
while true;
do
    clear
    q=$(fzf --exact -m);
    printf "$q\n" > pl.m3u
    play ./pl.m3u
done

# vim: tw=78:ts=8:sts=4:sw=4:et:ft=sh:norl:

